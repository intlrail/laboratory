!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=11)}([function(t,e,i){(function(i){var s,r,n;r=[],void 0===(n="function"==typeof(s=function(){"use strict";function e(t,e,i){var s=new XMLHttpRequest;s.open("GET",t),s.responseType="blob",s.onload=function(){o(s.response,e,i)},s.onerror=function(){console.error("could not download file")},s.send()}function s(t){var e=new XMLHttpRequest;return e.open("HEAD",t,!1),e.send(),200<=e.status&&299>=e.status}function r(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(i){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var n="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof i&&i.global===i?i:void 0,o=n.saveAs||"object"!=typeof window||window!==n?function(){}:"download"in HTMLAnchorElement.prototype?function(t,i,o){var a=n.URL||n.webkitURL,h=document.createElement("a");i=i||t.name||"download",h.download=i,h.rel="noopener","string"==typeof t?(h.href=t,h.origin===location.origin?r(h):s(h.href)?e(t,i,o):r(h,h.target="_blank")):(h.href=a.createObjectURL(t),setTimeout(function(){a.revokeObjectURL(h.href)},4e4),setTimeout(function(){r(h)},0))}:"msSaveOrOpenBlob"in navigator?function(t,i,n){if(i=i||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Depricated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,n),i);else if(s(t))e(t,i,n);else{var o=document.createElement("a");o.href=t,o.target="_blank",setTimeout(function(){r(o)})}}:function(t,i,s,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof t)return e(t,i,s);var o="application/octet-stream"===t.type,a=/constructor/i.test(n.HTMLElement)||n.safari,h=/CriOS\/[\d]+/.test(navigator.userAgent);if((h||o&&a)&&"object"==typeof FileReader){var l=new FileReader;l.onloadend=function(){var t=l.result;t=h?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=t:location=t,r=null},l.readAsDataURL(t)}else{var c=n.URL||n.webkitURL,u=c.createObjectURL(t);r?r.location=u:location.href=u,r=null,setTimeout(function(){c.revokeObjectURL(u)},4e4)}};n.saveAs=o.saveAs=o,t.exports=o})?s.apply(e,r):s)||(t.exports=n)}).call(this,i(2))},function(t,e,i){"use strict";var s={CircleDiameter:5,InitialClusterType:"Random",WalkerSource:"Random",MaxWalkers:5e3,EdgeMargin:0,PruneOldWalkers:!1,MaxAge:30,ReplenishWalkers:!1,PruneDistantWalkers:!1,MaxWanderDistance:20,VaryDiameterByDistance:!1,VaryDiameterRandomly:!1,ShowClusters:!0,ShowWalkers:!0,ShowShapes:!0,BiasTowards:"",BiasForce:1,UsePerWalkerBias:!0,UseFrame:!0,FrameSize:900,CaptureLines:!0,RenderMode:"Shapes",UseStroke:!1,UseColors:!1,BackgroundColor:{h:230,s:20,b:40},WalkerColor:{h:200,s:30,b:44},ClusterColor:{h:30,s:70,b:80},ShapeColor:{h:100,s:50,b:80},LineColor:{h:10,s:70,b:100},FrameColor:{h:0,s:100,b:100}};const r=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return r.length?r.pop():new n}static releaseBranch(t){r.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class o{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const i=t._polygon,s=t.x,r=t.y;i&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,a=i?0:t.radius*t.scale,h=(i?t._min_x:s-a)-o,l=(i?t._min_y:r-a)-o,c=(i?t._max_x:s+a)+o,u=(i?t._max_y:r+a)+o;t._bvh_min_x=h,t._bvh_min_y=l,t._bvh_max_x=c,t._bvh_max_y=u;let _=this._hierarchy,p=0;if(_)for(;;){if(!_._bvh_branch){const e=_._bvh_parent,i=_._bvh_min_x,s=_._bvh_min_y,r=_._bvh_max_x,o=_._bvh_max_y,a=_._bvh_parent=t._bvh_parent=n.getBranch();a._bvh_parent=e,a._bvh_left=_,a._bvh_right=t,a._bvh_sort=p++,a._bvh_min_x=h<i?h:i,a._bvh_min_y=l<s?l:s,a._bvh_max_x=c>r?c:r,a._bvh_max_y=u>o?u:o,e?e._bvh_left===_?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=_._bvh_left,e=t._bvh_min_y,i=t._bvh_max_x,s=t._bvh_max_y,r=h<t._bvh_min_x?h:t._bvh_min_x,n=l<e?l:e,o=c>i?c:i,a=u>s?u:s,d=(o-r)*(a-n)-(i-t._bvh_min_x)*(s-e),y=_._bvh_right,m=y._bvh_min_x,g=y._bvh_min_y,f=y._bvh_max_x,v=y._bvh_max_y,x=h<m?h:m,b=l<g?l:g,w=c>f?c:f,O=u>v?u:v,C=(w-x)*(O-b)-(f-m)*(v-g);_._bvh_sort=p++,_._bvh_min_x=r<x?r:x,_._bvh_min_y=n<b?n:b,_._bvh_max_x=o>w?o:w,_._bvh_max_y=a>O?a:O,_=d<=C?t:y}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const i=t._bvh_parent,s=i._bvh_parent,r=i._bvh_left,o=r===t?i._bvh_right:r;if(o._bvh_parent=s,o._bvh_branch&&(o._bvh_sort=i._bvh_sort),s){s._bvh_left===i?s._bvh_left=o:s._bvh_right=o;let t=s;for(;t;){const e=t._bvh_left,i=e._bvh_min_x,s=e._bvh_min_y,r=e._bvh_max_x,n=e._bvh_max_y,o=t._bvh_right,a=o._bvh_min_x,h=o._bvh_min_y,l=o._bvh_max_x,c=o._bvh_max_y;t._bvh_min_x=i<a?i:a,t._bvh_min_y=s<h?s:h,t._bvh_max_x=r>l?r:l,t._bvh_max_y=n>c?n:c,t=t._bvh_parent}}else this._hierarchy=o;n.releaseBranch(i)}update(){const t=this._bodies,e=t.length;for(let i=0;i<e;++i){const e=t[i];let s=!1;if(s||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,s=!0),!s){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const i=e.x,r=e.y,n=t?0:e.radius*e.scale,o=t?e._min_x:i-n,a=t?e._min_y:r-n,h=t?e._max_x:i+n,l=t?e._max_y:r+n;s=o<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||l>e._bvh_max_y}s&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],i=t._bvh_min_x,s=t._bvh_min_y,r=t._bvh_max_x,n=t._bvh_max_y;let o=this._hierarchy,a=!0;if(!o||!o._bvh_branch)return e;for(;o;){if(a){a=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=i&&t._bvh_max_y>=s&&t._bvh_min_x<=r&&t._bvh_min_y<=n;)t=(o=t)._bvh_branch?o._bvh_left:null}const h=o._bvh_branch,l=h?o._bvh_right:null;if(l&&l._bvh_max_x>i&&l._bvh_max_y>s&&l._bvh_min_x<r&&l._bvh_min_y<n)o=l,a=!0;else{h||o===t||e.push(o);let i=o._bvh_parent;if(!i)break;for(;i&&i._bvh_right===o;)i=(o=i)._bvh_parent;o=i}}return e}draw(t){const e=this._bodies,i=e.length;for(let s=0;s<i;++s)e[s].draw(t)}drawBVH(t){let e=this._hierarchy,i=!0;for(;e;){if(i){i=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const s=e._bvh_branch,r=e._bvh_min_x,n=e._bvh_min_y,o=e._bvh_max_x,a=e._bvh_max_y,h=s?e._bvh_right:null;if(t.moveTo(r,n),t.lineTo(o,n),t.lineTo(o,a),t.lineTo(r,a),t.lineTo(r,n),h)e=h,i=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class a{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function h(t,e,i=null,s=!0){const r=t._polygon,n=e._polygon;let o=!1;return i&&(i.a=t,i.b=e,i.a_in_b=!0,i.b_in_a=!0,i.overlap=null,i.overlap_x=0,i.overlap_y=0),r&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),n&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),s&&!function(t,e){const i=t._polygon,s=i?0:t.x,r=i?0:t.y,n=i?0:t.radius*t.scale,o=i?t._min_x:s-n,a=i?t._min_y:r-n,h=i?t._max_x:s+n,l=i?t._max_y:r+n,c=e._polygon,u=c?0:e.x,_=c?0:e.y,p=c?0:e.radius*e.scale,d=c?e._min_x:u-p,y=c?e._min_y:_-p,m=c?e._max_x:u+p,g=c?e._max_y:_+p;return o<m&&a<g&&h>d&&l>y}(t,e)||(r&&t._dirty_normals&&t._calculateNormals(),n&&e._dirty_normals&&e._calculateNormals(),o=r&&n?function(t,e,i=null){const s=t._coords.length,r=e._coords.length;if(2===s&&2===r){const s=t._coords,r=e._coords;return i&&(i.overlap=0),s[0]===r[0]&&s[1]===r[1]}const n=t._coords,o=e._coords,a=t._normals,h=e._normals;if(s>2)for(let t=0,e=1;t<s;t+=2,e+=2)if(c(n,o,a[t],a[e],i))return!1;if(r>2)for(let t=0,e=1;t<r;t+=2,e+=2)if(c(n,o,h[t],h[e],i))return!1;return!0}(t,e,i):r?l(t,e,i,!1):n?l(e,t,i,!0):function(t,e,i=null){const s=t.radius*t.scale,r=e.radius*e.scale,n=e.x-t.x,o=e.y-t.y,a=s+r,h=n*n+o*o;if(h>a*a)return!1;if(i){const t=Math.sqrt(h);i.a_in_b=s<=r&&t<=r-s,i.b_in_a=r<=s&&t<=s-r,i.overlap=a-t,i.overlap_x=n/t,i.overlap_y=o/t}return!0}(t,e,i)),i&&(i.collision=o),o}function l(t,e,i=null,s=!1){const r=t._coords,n=t._edges,o=t._normals,a=e.x,h=e.y,l=e.radius*e.scale,c=2*l,u=l*l,_=r.length;let p=!0,d=!0,y=null,m=0,g=0;if(2===_){const t=a-r[0],e=h-r[1],s=t*t+e*e;if(s>u)return!1;if(i){const i=Math.sqrt(s);y=l-i,m=t/i,g=e/i,d=!1}}else for(let t=0,e=1;t<_;t+=2,e+=2){const s=a-r[t],f=h-r[e],v=n[t],x=n[e],b=s*v+f*x,w=b<0?-1:b>v*v+x*x?1:0;let O=!1,C=0,T=0,M=0;if(i&&p&&s*s+f*f>u&&(p=!1),w){const e=-1===w,o=e?0===t?_-2:t-2:t===_-2?0:t+2,c=o+1,p=a-r[o],y=h-r[c],m=n[o],g=n[c],v=p*m+y*g;if((v<0?-1:v>m*m+g*g?1:0)===-w){const t=e?s:p,r=e?f:y,n=t*t+r*r;if(n>u)return!1;if(i){const e=Math.sqrt(n);O=!0,C=l-e,T=t/e,M=r/e,d=!1}}}else{const r=o[t],n=o[e],a=s*r+f*n,h=a<0?-a:a;if(a>0&&h>l)return!1;i&&(O=!0,C=l-a,T=r,M=n,(d&&a>=0||C<c)&&(d=!1))}O&&(null===y||y>C)&&(y=C,m=T,g=M)}return i&&(i.a_in_b=s?d:p,i.b_in_a=s?p:d,i.overlap=y,i.overlap_x=s?-m:m,i.overlap_y=s?-g:g),!0}function c(t,e,i,s,r=null){const n=t.length,o=e.length;if(!n||!o)return!0;let a=null,h=null,l=null,c=null;for(let e=0,r=1;e<n;e+=2,r+=2){const n=t[e]*i+t[r]*s;(null===a||a>n)&&(a=n),(null===h||h<n)&&(h=n)}for(let t=0,r=1;t<o;t+=2,r+=2){const n=e[t]*i+e[r]*s;(null===l||l>n)&&(l=n),(null===c||c<n)&&(c=n)}if(a>c||h<l)return!0;if(r){let t=0;if(a<l)if(r.a_in_b=!1,h<c)t=h-l,r.b_in_a=!1;else{const e=h-l,i=c-a;t=e<i?e:-i}else if(r.b_in_a=!1,h>c)t=a-c,r.a_in_b=!1;else{const e=h-l,i=c-a;t=e<i?e:-i}const e=r.overlap,n=t<0?-t:t;if(null===e||e>n){const e=t<0?-1:1;r.overlap=n,r.overlap_x=i*e,r.overlap_y=s*e}}return!1}class u{constructor(t=0,e=0,i=0){this.x=t,this.y=e,this.padding=i,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=i,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,i=!0){return h(this,t,e,i)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new a}static createResult(){return new a}}class _ extends u{constructor(t=0,e=0,i=0,s=1,r=0){super(t,e,r),this.radius=i,this.scale=s}draw(t){const e=this.x,i=this.y,s=this.radius*this.scale;t.moveTo(e+s,i),t.arc(e,i,s,0,2*Math.PI)}}class p extends u{constructor(t=0,e=0,i=[],s=0,r=1,n=1,o=0){super(t,e,o),this.angle=s,this.scale_x=r,this.scale_y=n,this._polygon=!0,this._x=t,this._y=e,this._angle=s,this._scale_x=r,this._scale_y=n,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,p.prototype.setPoints.call(this,i)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let i=2;i<e.length;i+=2)t.lineTo(e[i],e[i+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const i=this._points;for(let s=0,r=0,n=1;s<e;++s,r+=2,n+=2){const e=t[s];i[r]=e[0],i[n]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,i=this.angle,s=this.scale_x,r=this.scale_y,n=this._points,o=this._coords,a=n.length;let h,l,c,u;for(let _=0,p=1;_<a;_+=2,p+=2){let a=n[_]*s,d=n[p]*r;if(i){const t=Math.cos(i),e=Math.sin(i),s=a;a=s*t-d*e,d=s*e+d*t}a+=t,d+=e,o[_]=a,o[p]=d,0===_?(h=l=a,c=u=d):(a<h?h=a:a>l&&(l=a),d<c?c=d:d>u&&(u=d))}this._x=t,this._y=e,this._angle=i,this._scale_x=s,this._scale_y=r,this._min_x=h,this._min_y=c,this._max_x=l,this._max_y=u,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,i=this._normals,s=t.length;for(let r=0,n=1;r<s;r+=2,n+=2){const o=r+2<s?r+2:0,a=t[o]-t[r],h=t[o+1]-t[n],l=a||h?Math.sqrt(a*a+h*h):0;e[r]=a,e[n]=h,i[r]=l?h/l:0,i[n]=l?-a/l:0}this._dirty_normals=!1}}class d extends p{constructor(t=0,e=0,i=0){super(t,e,[[0,0]],0,1,1,i),this._point=!0}}d.prototype.setPoints=void 0;class y{constructor(){this._bvh=new o}createCircle(t=0,e=0,i=0,s=1,r=0){const n=new _(t,e,i,s,r);return this._bvh.insert(n),n}createPolygon(t=0,e=0,i=[[0,0]],s=0,r=1,n=1,o=0){const a=new p(t,e,i,s,r,n,o);return this._bvh.insert(a),a}createPoint(t=0,e=0,i=0){const s=new d(t,e,i);return this._bvh.insert(s),s}createResult(){return new a}static createResult(){return new a}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,i=null,s=!0){return h(t,e,i,s)}}var m=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t};var g=function(t){var e=t.type,i=function(t,e){var i={};for(var s in t)e.indexOf(s)>=0||Object.prototype.hasOwnProperty.call(t,s)&&(i[s]=t[s]);return i}(t,["type"]);switch(e){case"circle":return f(i);case"ellipse":return v(i);case"line":return x(i);case"path":return M(i);case"polygon":return k(i);case"polyline":return E(i);case"rect":return A(i);case"g":return F(i);default:throw new Error("Not a valid shape type")}},f=function(t){var e=t.cx,i=t.cy,s=t.r;return[{x:e,y:i-s,moveTo:!0},{x:e,y:i+s,curve:{type:"arc",rx:s,ry:s,sweepFlag:1}},{x:e,y:i-s,curve:{type:"arc",rx:s,ry:s,sweepFlag:1}}]},v=function(t){var e=t.cx,i=t.cy,s=t.rx,r=t.ry;return[{x:e,y:i-r,moveTo:!0},{x:e,y:i+r,curve:{type:"arc",rx:s,ry:r,sweepFlag:1}},{x:e,y:i-r,curve:{type:"arc",rx:s,ry:r,sweepFlag:1}}]},x=function(t){var e=t.x1,i=t.x2;return[{x:e,y:t.y1,moveTo:!0},{x:i,y:t.y2}]},b=/[MmLlHhVvCcSsQqTtAaZz]/g,w={A:7,C:6,H:1,L:2,M:2,Q:4,S:4,T:2,V:1,Z:0},O=["a","c","h","l","m","q","s","t","v"],C=function(t){return-1!==O.indexOf(t)},T=["xAxisRotation","largeArcFlag","sweepFlag"],M=function(t){for(var e=t.d,i=function(t){return t.match(b)}(e),s=function(t){return t.split(b).map(function(t){return t.replace(/[0-9]+-/g,function(t){return t.slice(0,-1)+" -"})}).map(function(t){return t.replace(/\.[0-9]+/g,function(t){return t+" "})}).map(function(t){return t.trim()}).filter(function(t){return t.length>0}).map(function(t){return t.split(/[ ,]+/).map(parseFloat).filter(function(t){return!isNaN(t)})})}(e),r=[],n=void 0,o=0,a=i.length;o<a;o++){var h=i[o],l=h.toUpperCase(),c=w[l],u=C(h);if(c>0)for(var _=s.shift(),p=_.length/c,d=0;d<p;d++){var y=r[r.length-1]||{x:0,y:0};switch(l){case"M":var m=(u?y.x:0)+_.shift(),g=(u?y.y:0)+_.shift();0===d?(n={x:m,y:g},r.push({x:m,y:g,moveTo:!0})):r.push({x:m,y:g});break;case"L":r.push({x:(u?y.x:0)+_.shift(),y:(u?y.y:0)+_.shift()});break;case"H":r.push({x:(u?y.x:0)+_.shift(),y:y.y});break;case"V":r.push({x:y.x,y:(u?y.y:0)+_.shift()});break;case"A":r.push({curve:{type:"arc",rx:_.shift(),ry:_.shift(),xAxisRotation:_.shift(),largeArcFlag:_.shift(),sweepFlag:_.shift()},x:(u?y.x:0)+_.shift(),y:(u?y.y:0)+_.shift()});var f=!0,v=!1,x=void 0;try{for(var O,M=T[Symbol.iterator]();!(f=(O=M.next()).done);f=!0){var k=O.value;0===r[r.length-1].curve[k]&&delete r[r.length-1].curve[k]}}catch(t){v=!0,x=t}finally{try{!f&&M.return&&M.return()}finally{if(v)throw x}}break;case"C":r.push({curve:{type:"cubic",x1:(u?y.x:0)+_.shift(),y1:(u?y.y:0)+_.shift(),x2:(u?y.x:0)+_.shift(),y2:(u?y.y:0)+_.shift()},x:(u?y.x:0)+_.shift(),y:(u?y.y:0)+_.shift()});break;case"S":var E=(u?y.x:0)+_.shift(),S=(u?y.y:0)+_.shift(),A=(u?y.x:0)+_.shift(),R=(u?y.y:0)+_.shift(),N={},F=void 0,L=void 0;y.curve&&"cubic"===y.curve.type?(N.x=Math.abs(y.x-y.curve.x2),N.y=Math.abs(y.y-y.curve.y2),F=y.x<y.curve.x2?y.x-N.x:y.x+N.x,L=y.y<y.curve.y2?y.y-N.y:y.y+N.y):(N.x=Math.abs(A-E),N.y=Math.abs(R-S),F=y.x,L=y.y),r.push({curve:{type:"cubic",x1:F,y1:L,x2:E,y2:S},x:A,y:R});break;case"Q":r.push({curve:{type:"quadratic",x1:(u?y.x:0)+_.shift(),y1:(u?y.y:0)+_.shift()},x:(u?y.x:0)+_.shift(),y:(u?y.y:0)+_.shift()});break;case"T":var H=(u?y.x:0)+_.shift(),D=(u?y.y:0)+_.shift(),I=void 0,U=void 0;if(y.curve&&"quadratic"===y.curve.type){var W={x:Math.abs(y.x-y.curve.x1),y:Math.abs(y.y-y.curve.y1)};I=y.x<y.curve.x1?y.x-W.x:y.x+W.x,U=y.y<y.curve.y1?y.y-W.y:y.y+W.y}else I=y.x,U=y.y;r.push({curve:{type:"quadratic",x1:I,y1:U},x:H,y:D})}}else{var P=r[r.length-1]||{x:0,y:0};P.x===n.x&&P.y===n.y||r.push({x:n.x,y:n.y})}}return r},k=function(t){var e=t.points;return S({closed:!0,points:e})},E=function(t){var e=t.points;return S({closed:!1,points:e})},S=function(t){var e=t.closed,i=t.points.split(/[\s,]+/).map(function(t){return parseFloat(t)}).reduce(function(t,e,i){return i%2==0?t.push({x:e}):t[(i-1)/2].y=e,t},[]);return e&&i.push(m({},i[0])),i[0].moveTo=!0,i},A=function(t){var e=t.height,i=t.rx,s=t.ry,r=t.width,n=t.x,o=t.y;return i||s?N({height:e,rx:i||s,ry:s||i,width:r,x:n,y:o}):R({height:e,width:r,x:n,y:o})},R=function(t){var e=t.height,i=t.width,s=t.x,r=t.y;return[{x:s,y:r,moveTo:!0},{x:s+i,y:r},{x:s+i,y:r+e},{x:s,y:r+e},{x:s,y:r}]},N=function(t){var e=t.height,i=t.rx,s=t.ry,r=t.width,n=t.x,o=t.y,a={type:"arc",rx:i,ry:s,sweepFlag:1};return[{x:n+i,y:o,moveTo:!0},{x:n+r-i,y:o},{x:n+r,y:o+s,curve:a},{x:n+r,y:o+e-s},{x:n+r-i,y:o+e,curve:a},{x:n+i,y:o+e},{x:n,y:o+e-s,curve:a},{x:n,y:o+s},{x:n+i,y:o,curve:a}]},F=function(t){return t.shapes.map(function(t){return g(t)})},L=g,H=function(t){var e="",i=0,s=void 0,r=!0,n=!1,o=void 0;try{for(var a,h=t[Symbol.iterator]();!(r=(a=h.next()).done);r=!0){var l=a.value,c=l.curve,u=void 0!==c&&c,_=l.moveTo,p=l.x,d=l.y,y=0===i||_,m=i===t.length-1||t[i+1].moveTo,g=0===i?null:t[i-1];if(y)s=l,m||(e+="M"+p+","+d);else if(u){switch(u.type){case"arc":var f=l.curve,v=f.largeArcFlag,x=void 0===v?0:v,b=f.rx,w=f.ry,O=f.sweepFlag,C=void 0===O?0:O,T=f.xAxisRotation;e+="A"+b+","+w+","+(void 0===T?0:T)+","+x+","+C+","+p+","+d;break;case"cubic":var M=l.curve;e+="C"+M.x1+","+M.y1+","+M.x2+","+M.y2+","+p+","+d;break;case"quadratic":var k=l.curve;e+="Q"+k.x1+","+k.y1+","+p+","+d}m&&p===s.x&&d===s.y&&(e+="Z")}else m&&p===s.x&&d===s.y?e+="Z":p!==g.x&&d!==g.y?e+="L"+p+","+d:p!==g.x?e+="H"+p:d!==g.y&&(e+="V"+d);i++}}catch(t){n=!0,o=t}finally{try{!r&&h.return&&h.return()}finally{if(n)throw o}}return e},D=function(t){var e=Array.isArray(t),i=e?Array.isArray(t[0]):"g"===t.type,s=e?t:i?t.shapes.map(function(t){return L(t)}):L(t);return i?s.map(function(t){return H(t)}):H(s)},I=("function"==typeof Symbol&&Symbol.iterator,i(0));i.d(e,"a",function(){return U});class U{constructor(t,e){this.p5=t,this.settings=Object.assign({},s,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.showShapes=this.settings.ShowShapes,this.useFrame=this.settings.UseFrame,this.renderMode=this.settings.RenderMode,this.numWalkers=0,this.customMovementFunction=void 0,this.edgeMargin=this.settings.EdgeMargin,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.resetEdges(),this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new y,this.bodies=[],this.shapes=[],this.lines=[]}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createDefaultWalkers(this.settings.MaxWalkers-this.numWalkers,this.settings.ReplenishmentSource),this.moveWalkers(),this.system.update(),this.handleCollisions(),this.pruneWalkers())}draw(){if(this.settings.UseColors?this.p5.background(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.background(255),this.showShapes)for(let t of this.shapes){this.settings.UseColors?(this.p5.fill(this.getColorStringFromObject(this.settings.ShapeColor)),this.p5.stroke(this.getColorStringFromObject(this.settings.ShapeColor))):(this.p5.noFill(),this.p5.stroke(100)),this.p5.beginShape();for(let e=0;e<t._coords.length;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}if("Lines"==this.renderMode){if(this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.LineColor)):this.p5.stroke(75),this.lines.length>0)for(let t of this.lines)this.p5.line(t.p1.x,t.p1.y,t.p2.x,t.p2.y)}else for(let t of this.bodies)if(t._point)this.p5.noFill(),t.stuck&&this.showClusters?(this.p5.noStroke(),this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(200),this.p5.ellipse(t.x,t.y,5)):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.stroke(0):this.p5.noStroke(),this.p5.point(t.x,t.y);else if(t._circle)this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.ellipse(t.x,t.y,2*t.radius);else if(t._polygon){this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.beginShape();for(let e=0;e<t._coords.length-1;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}this.useFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.FrameColor)):this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}resetEdges(){this.edges.left=this.useFrame?this.frame.left:0,this.edges.right=this.useFrame?this.frame.right:window.innerWidth,this.edges.top=this.useFrame?this.frame.top:0,this.edges.bottom=this.useFrame?this.frame.bottom:window.innerHeight}moveWalkers(){if(this.bodies.length>0)for(let t of this.bodies)if(!t.stuck){let e,i=this.p5.random(-1,1),s=this.p5.random(-1,1);if(this.settings.UsePerWalkerBias&&t.hasOwnProperty("BiasTowards"))i+=(e=this.getDeltasTowards(t.x,t.y,t.BiasTowards.x,t.BiasTowards.y)).x,s+=e.y;else switch(this.settings.BiasTowards){case"Top":s-=this.settings.BiasForce;break;case"Bottom":s+=this.settings.BiasForce;break;case"Left":i-=this.settings.BiasForce;break;case"Right":i+=this.settings.BiasForce;break;case"Center":i+=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,s+=e.y;break;case"Edges":i-=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,s-=e.y;break;case"Equator":t.y<window.innerHeight/2?s+=this.settings.BiasForce:s-=this.settings.BiasForce;break;case"Meridian":t.x<window.innerWidth/2?i+=this.settings.BiasForce:i-=this.settings.BiasForce}if(null!=typeof this.customMovementFunction&&this.customMovementFunction instanceof Function){let e=this.customMovementFunction(t);i+=e.dx,s+=e.dy}t._point&&(i=Math.round(i),s=Math.round(s)),t.x+=i,t.y+=s,t.age++}}getDeltasTowards(t,e,i,s){let r=Math.atan2(s-e,i-t);return{x:Math.cos(r)*this.settings.BiasForce,y:Math.sin(r)*this.settings.BiasForce}}handleCollisions(){for(let t of this.shapes){const e=t.potentials();for(let i of e)t.collides(i)&&(i.stuck=!0,this.numWalkers--)}for(let t of this.bodies){if(t.stuck)continue;const e=t.potentials();for(let i of e)t._point?i.stuck&&(t.stuck=!0,this.numWalkers--):i.stuck&&t.collides(i)&&(t.stuck=!0,this.numWalkers--,this.settings.CaptureLines&&this.lines.push({p1:{x:t.x,y:t.y},p2:{x:i.x,y:i.y}}))}}pruneWalkers(){if(this.settings.PruneOldWalkers||this.settings.PruneDistantWalkers)for(let[t,e]of this.bodies.entries())!e.stuck&&(this.settings.PruneOldWalkers&&e.age>this.settings.MaxAge||this.settings.PruneDistantWalkers&&this.p5.dist(e.x,e.y,e.originalX,e.originalY)>this.settings.MaxWanderDistance)&&(e.remove(),this.bodies.splice(t,1),this.numWalkers--)}createParticle(t){if(void 0===t||"object"!=typeof t)return;let e;if(t.hasOwnProperty("type"))switch(t.type){case"Point":(e=this.system.createPoint(Math.round(t.x),Math.round(t.y)))._point=!0;break;case"Circle":default:(e=this.system.createCircle(t.x,t.y,t.diameter/2))._circle=!0;break;case"Polygon":(e=this.system.createPolygon(t.x,t.y,t.polygon,t.hasOwnProperty("rotation")?this.p5.radians(t.rotation):0))._polygon=!0}else{const i=t.hasOwnProperty("diameter")?t.diameter:this.settings.CircleDiameter;(e=this.system.createCircle(t.x,t.y,i/2))._circle=!0}e.stuck=!!t.hasOwnProperty("stuck")&&t.stuck,e.age=0,t.hasOwnProperty("BiasTowards")&&(e.BiasTowards=t.BiasTowards),e.originalX=e.x,e.originalY=e.y,this.bodies.push(e)}createWalker(t){this.createParticle(t),this.numWalkers++}createDefaultWalkers(t=this.settings.MaxWalkers,e=this.settings.WalkerSource){for(let i=0;i<t;i++){let t={};switch(e){case"Edges":switch(Math.round(this.p5.random(1,4))){case 1:t.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),t.y=this.p5.random(this.edges.top,this.edges.top+this.edgeMargin);break;case 3:t.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),t.y=this.p5.random(this.edges.bottom-this.edgeMargin,this.edges.bottom);break;case 4:t.x=this.p5.random(this.edges.left,this.edges.left+this.edgeMargin),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case 2:t.x=this.p5.random(this.edges.right-this.edgeMargin,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom)}break;case"Circle":let i;switch(typeof this.settings.FrameSize){case"number":i=this.settings.FrameSize/2;break;case"object":i=this.settings.FrameSize[0]>this.settings.FrameSize[1]?this.settings.FrameSize[1]/2:this.settings.FrameSize[0]/2}let s=this.p5.random(5,i),r=this.p5.random(360),n=this.settings.hasOwnProperty("CircleCenter")?this.settings.CircleCenter:{x:window.innerWidth/2,y:window.innerHeight/2};t.x=n.x+s*Math.cos(r*Math.PI/180),t.y=n.y+s*Math.sin(r*Math.PI/180);break;case"Random":t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case"Center":t.x=window.innerWidth/2,t.y=window.innerHeight/2;break;case"Offscreen":if(t.x=this.p5.random(this.edges.left-200,this.edges.right+200),t.y=this.p5.random(this.edges.top-200,this.edges.bottom+200),t.x>this.edges.left&&t.x<this.edges.right&&t.y>this.edges.top&&t.y<this.edges.bottom)continue}if(this.settings.VaryDiameterByDistance){let e=this.p5.dist(t.x,t.y,window.innerWidth/2,window.innerHeight/2);t.diameter=this.p5.map(e,0,this.maxDistance,this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1])}else this.settings.VaryDiameterRandomly&&(t.diameter=this.p5.random(this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1]));this.createWalker(t)}}createDefaultClusters(t=this.settings.InitialClusterType){let e=[];switch(t){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2,diameter:this.settings.CircleDiameter});break;case"Ring":let i=100,s=20;for(let t=0;t<s;t++)e.push({x:window.innerWidth/2+i*Math.cos(360/s*t*Math.PI/180),y:window.innerHeight/2+i*Math.sin(360/s*t*Math.PI/180),diameter:this.settings.CircleDiameter});break;case"Random":for(let t=0;t<100;t++)e.push({x:this.p5.random(this.edges.left,this.edges.right),y:this.p5.random(this.edges.top,this.edges.bottom),diameter:this.settings.CircleDiameter});break;case"Wall":switch(this.settings.BiasTowards){case"Top":e=this.createHorizontalClusterWall(this.edges.top);break;case"Bottom":e=this.createHorizontalClusterWall(this.edges.bottom);break;case"Left":e=this.createVerticalClusterWall(this.edges.left);break;case"Right":e=this.createVerticalClusterWall(this.edges.right);break;case"Edges":e=(e=(e=(e=e.concat(this.createHorizontalClusterWall(this.edges.top))).concat(this.createHorizontalClusterWall(this.edges.bottom))).concat(this.createVerticalClusterWall(this.edges.left))).concat(this.createVerticalClusterWall(this.edges.right));break;case"Equator":e=e.concat(this.createHorizontalClusterWall(window.innerHeight/2));break;case"Meridian":e=e.concat(this.createVerticalClusterWall(window.innerWidth/2))}}this.createClusterFromParams(e)}createHorizontalClusterWall(t){let e=[],i=this.useFrame?this.edges.right-this.edges.left:window.innerWidth;for(let s=0;s<=i/this.settings.CircleDiameter;s++)e.push({x:this.edges.left+s*this.settings.CircleDiameter,y:t,diameter:this.settings.CircleDiameter});return e}createVerticalClusterWall(t){let e=[],i=this.useFrame?this.edges.bottom-this.edges.top:window.innerHeight;for(let s=0;s<=i/this.settings.CircleDiameter;s++)e.push({x:t,y:this.edges.top+s*this.settings.CircleDiameter,diameter:this.settings.CircleDiameter});return e}createClusterFromParams(t){if(t.length>0)for(let e of t)e.stuck=!0,this.createParticle(e)}createShapesFromPaths(t){if(t.hasOwnProperty("points")||0!=t.length)for(let e of t)if(e.solid){let t=this.system.createPolygon(e.x,e.y,e.points);t.solid=e.solid,t.closed=e.closed,this.shapes.push(t)}else for(let t=1;t<e.points.length;t++){let i=this.system.createPolygon(e.x,e.y,[[e.points[t-1][0],e.points[t-1][1]],[e.points[t][0],e.points[t][1]]]);i.solid=!1,i.closed=!1,this.shapes.push(i)}else console.error("Unable to create shapes. Paths must have an array of points [[x,y],...]")}removeAll(){for(let t of this.bodies)this.system.remove(t);for(let t of this.shapes)this.system.remove(t);this.bodies=[],this.shapes=[],this.lines=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}toggleShowShapes(){this.showShapes=!this.showShapes}toggleUseFrame(){this.useFrame=!this.useFrame,this.resetEdges()}toggleLineRenderingMode(){"Lines"!=this.renderMode?this.settings.CaptureLines?this.renderMode="Lines":console.error("Line rendering mode only allowed when CaptureLines is set."):this.renderMode="Shapes"}pause(){this.paused=!0}unpause(){this.paused=!1}getColorStringFromObject(t){let e="hsla("+t.h+", "+t.s+"%, "+t.b+"%, ";return t.hasOwnProperty("a")?e+=t.a+")":e+="1.0)",e}export(){let t=document.createElement("svg");switch(t.setAttribute("xmlns","http://www.w3.org/2000/svg"),t.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),t.setAttribute("width",window.innerWidth),t.setAttribute("height",window.innerHeight),t.setAttribute("viewBox","0 0 "+window.innerWidth+" "+window.innerHeight),this.renderMode){case"Shapes":default:for(let e of this.bodies)(e.stuck||this.showWalkers)&&(e._circle?t.appendChild(this.createCircleElFromBody(e)):t.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(e._coords))));break;case"Lines":if(this.lines.length>0)for(let e of this.lines){let i=[];i.push({x:e.p1.x,y:e.p1.y}),i.push({x:e.p2.x,y:e.p2.y}),t.appendChild(this.createPathElFromPoints(i))}}if(this.shapes.length>0)for(let e of this.shapes)t.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(e._coords)));let e=document.implementation.createDocumentType("svg","-//W3C//DTD SVG 1.1//EN","http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"),i=document.implementation.createDocument("http://www.w3.org/2000/svg","svg",e);i.replaceChild(t,i.documentElement);let s=(new XMLSerializer).serializeToString(i),r=new Blob([s.replace(/></g,">\n\r<")]);Object(I.saveAs)(r,"dla-"+Date.now()+".svg")}getPointsFromCoords(t){let e=[];for(let i=0;i<t.length-1;i+=2)e.push({x:t[i],y:t[i+1]});return e}createPathElFromPoints(t){let e="";for(let[i,s]of t.entries())e+=s.x+","+s.y,i<t.length-1&&(e+=" ");let i=D({type:"polyline",points:e}),s=document.createElement("path");return s.setAttribute("d",i),s.setAttribute("style","fill: none; stroke: black; stroke-width: 1"),s}createCircleElFromBody(t){let e=document.createElement("circle");return e.setAttribute("cx",t.x),e.setAttribute("cy",t.y),e.setAttribute("r",t.radius),e}}},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])};function r(t,e){function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}function n(t,e){var i=t[0],s=t[1];return[i*Math.cos(e)-s*Math.sin(e),i*Math.sin(e)+s*Math.cos(e)]}function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var i=0;i<t.length;i++)if("number"!=typeof t[i])throw new Error("assertNumbers arguments["+i+"] is not a number. "+typeof t[i]+" == typeof "+t[i]);return!0}var a=Math.PI;function h(t,e,i){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var s=t.rX,r=t.rY,o=t.x,h=t.y;s=Math.abs(t.rX),r=Math.abs(t.rY);var l=n([(e-o)/2,(i-h)/2],-t.xRot/180*a),c=l[0],u=l[1],_=Math.pow(c,2)/Math.pow(s,2)+Math.pow(u,2)/Math.pow(r,2);1<_&&(s*=Math.sqrt(_),r*=Math.sqrt(_)),t.rX=s,t.rY=r;var p=Math.pow(s,2)*Math.pow(u,2)+Math.pow(r,2)*Math.pow(c,2),d=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(s,2)*Math.pow(r,2)-p)/p)),y=s*u/r*d,m=-r*c/s*d,g=n([y,m],t.xRot/180*a);t.cX=g[0]+(e+o)/2,t.cY=g[1]+(i+h)/2,t.phi1=Math.atan2((u-m)/r,(c-y)/s),t.phi2=Math.atan2((-u-m)/r,(-c-y)/s),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*a),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*a),t.phi1*=180/a,t.phi2*=180/a}function l(t,e,i){o(t,e,i);var s=t*t+e*e-i*i;if(0>s)return[];if(0===s)return[[t*i/(t*t+e*e),e*i/(t*t+e*e)]];var r=Math.sqrt(s);return[[(t*i+e*r)/(t*t+e*e),(e*i-t*r)/(t*t+e*e)],[(t*i-e*r)/(t*t+e*e),(e*i+t*r)/(t*t+e*e)]]}var c,u=Math.PI/180;function _(t,e,i){return(1-i)*t+i*e}function p(t,e,i,s){return t+Math.cos(s/180*a)*e+Math.sin(s/180*a)*i}function d(t,e,i,s){var r=e-t,n=i-e,o=3*r+3*(s-i)-6*n,a=6*(n-r),h=3*r;return Math.abs(o)<1e-6?[-h/a]:function(t,e,i){void 0===i&&(i=1e-6);var s=t*t/4-e;if(s<-i)return[];if(s<=i)return[-t/2];var r=Math.sqrt(s);return[-t/2-r,-t/2+r]}(a/o,h/o,1e-6)}function y(t,e,i,s,r){var n=1-r;return t*(n*n*n)+e*(3*n*n*r)+i*(3*n*r*r)+s*(r*r*r)}!function(t){function e(){return r(function(t,e,i){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=i),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=i),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=i),t.relative=!1),t})}function i(){var t=NaN,e=NaN,i=NaN,s=NaN;return r(function(r,n,o){return r.type&w.SMOOTH_CURVE_TO&&(r.type=w.CURVE_TO,t=isNaN(t)?n:t,e=isNaN(e)?o:e,r.x1=r.relative?n-t:2*n-t,r.y1=r.relative?o-e:2*o-e),r.type&w.CURVE_TO?(t=r.relative?n+r.x2:r.x2,e=r.relative?o+r.y2:r.y2):(t=NaN,e=NaN),r.type&w.SMOOTH_QUAD_TO&&(r.type=w.QUAD_TO,i=isNaN(i)?n:i,s=isNaN(s)?o:s,r.x1=r.relative?n-i:2*n-i,r.y1=r.relative?o-s:2*o-s),r.type&w.QUAD_TO?(i=r.relative?n+r.x1:r.x1,s=r.relative?o+r.y1:r.y1):(i=NaN,s=NaN),r})}function s(){var t=NaN,e=NaN;return r(function(i,s,r){if(i.type&w.SMOOTH_QUAD_TO&&(i.type=w.QUAD_TO,t=isNaN(t)?s:t,e=isNaN(e)?r:e,i.x1=i.relative?s-t:2*s-t,i.y1=i.relative?r-e:2*r-e),i.type&w.QUAD_TO){t=i.relative?s+i.x1:i.x1,e=i.relative?r+i.y1:i.y1;var n=i.x1,o=i.y1;i.type=w.CURVE_TO,i.x1=((i.relative?0:s)+2*n)/3,i.y1=((i.relative?0:r)+2*o)/3,i.x2=(i.x+2*n)/3,i.y2=(i.y+2*o)/3}else t=NaN,e=NaN;return i})}function r(t){var e=0,i=0,s=NaN,r=NaN;return function(n){if(isNaN(s)&&!(n.type&w.MOVE_TO))throw new Error("path must start with moveto");var o=t(n,e,i,s,r);return n.type&w.CLOSE_PATH&&(e=s,i=r),void 0!==n.x&&(e=n.relative?e+n.x:n.x),void 0!==n.y&&(i=n.relative?i+n.y:n.y),n.type&w.MOVE_TO&&(s=e,r=i),o}}function a(t,e,i,s,n,a){return o(t,e,i,s,n,a),r(function(r,o,h,l){var c=r.x1,u=r.x2,_=r.relative&&!isNaN(l),p=void 0!==r.x?r.x:_?0:o,d=void 0!==r.y?r.y:_?0:h;function y(t){return t*t}r.type&w.HORIZ_LINE_TO&&0!==e&&(r.type=w.LINE_TO,r.y=r.relative?0:h),r.type&w.VERT_LINE_TO&&0!==i&&(r.type=w.LINE_TO,r.x=r.relative?0:o),void 0!==r.x&&(r.x=r.x*t+d*i+(_?0:n)),void 0!==r.y&&(r.y=p*e+r.y*s+(_?0:a)),void 0!==r.x1&&(r.x1=r.x1*t+r.y1*i+(_?0:n)),void 0!==r.y1&&(r.y1=c*e+r.y1*s+(_?0:a)),void 0!==r.x2&&(r.x2=r.x2*t+r.y2*i+(_?0:n)),void 0!==r.y2&&(r.y2=u*e+r.y2*s+(_?0:a));var m=t*s-e*i;if(void 0!==r.xRot&&(1!==t||0!==e||0!==i||1!==s))if(0===m)delete r.rX,delete r.rY,delete r.xRot,delete r.lArcFlag,delete r.sweepFlag,r.type=w.LINE_TO;else{var g=r.xRot*Math.PI/180,f=Math.sin(g),v=Math.cos(g),x=1/y(r.rX),b=1/y(r.rY),O=y(v)*x+y(f)*b,C=2*f*v*(x-b),T=y(f)*x+y(v)*b,M=O*s*s-C*e*s+T*e*e,k=C*(t*s+e*i)-2*(O*i*s+T*t*e),E=O*i*i-C*t*i+T*t*t,S=(Math.atan2(k,M-E)+Math.PI)%Math.PI/2,A=Math.sin(S),R=Math.cos(S);r.rX=Math.abs(m)/Math.sqrt(M*y(R)+k*A*R+E*y(A)),r.rY=Math.abs(m)/Math.sqrt(M*y(A)-k*A*R+E*y(R)),r.xRot=180*S/Math.PI}return void 0!==r.sweepFlag&&0>m&&(r.sweepFlag=+!r.sweepFlag),r})}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),o(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),t}},t.TO_ABS=e,t.TO_REL=function(){return r(function(t,e,i){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=i),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=i),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=i),t.relative=!0),t})},t.NORMALIZE_HVZ=function(t,e,i){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),r(function(s,r,n,o,a){if(isNaN(o)&&!(s.type&w.MOVE_TO))throw new Error("path must start with moveto");return e&&s.type&w.HORIZ_LINE_TO&&(s.type=w.LINE_TO,s.y=s.relative?0:n),i&&s.type&w.VERT_LINE_TO&&(s.type=w.LINE_TO,s.x=s.relative?0:r),t&&s.type&w.CLOSE_PATH&&(s.type=w.LINE_TO,s.x=s.relative?o-r:o,s.y=s.relative?a-n:a),s.type&w.ARC&&(0===s.rX||0===s.rY)&&(s.type=w.LINE_TO,delete s.rX,delete s.rY,delete s.xRot,delete s.lArcFlag,delete s.sweepFlag),s})},t.NORMALIZE_ST=i,t.QT_TO_C=s,t.INFO=r,t.SANITIZE=function(t){void 0===t&&(t=0),o(t);var e=NaN,i=NaN,s=NaN,n=NaN;return r(function(r,o,a,h,l){var c=Math.abs,u=!1,_=0,p=0;if(r.type&w.SMOOTH_CURVE_TO&&(_=isNaN(e)?0:o-e,p=isNaN(i)?0:a-i),r.type&(w.CURVE_TO|w.SMOOTH_CURVE_TO)?(e=r.relative?o+r.x2:r.x2,i=r.relative?a+r.y2:r.y2):(e=NaN,i=NaN),r.type&w.SMOOTH_QUAD_TO?(s=isNaN(s)?o:2*o-s,n=isNaN(n)?a:2*a-n):r.type&w.QUAD_TO?(s=r.relative?o+r.x1:r.x1,n=r.relative?a+r.y1:r.y2):(s=NaN,n=NaN),r.type&w.LINE_COMMANDS||r.type&w.ARC&&(0===r.rX||0===r.rY||!r.lArcFlag)||r.type&w.CURVE_TO||r.type&w.SMOOTH_CURVE_TO||r.type&w.QUAD_TO||r.type&w.SMOOTH_QUAD_TO){var d=void 0===r.x?0:r.relative?r.x:r.x-o,y=void 0===r.y?0:r.relative?r.y:r.y-a;_=isNaN(s)?void 0===r.x1?_:r.relative?r.x:r.x1-o:s-o,p=isNaN(n)?void 0===r.y1?p:r.relative?r.y:r.y1-a:n-a;var m=void 0===r.x2?0:r.relative?r.x:r.x2-o,g=void 0===r.y2?0:r.relative?r.y:r.y2-a;c(d)<=t&&c(y)<=t&&c(_)<=t&&c(p)<=t&&c(m)<=t&&c(g)<=t&&(u=!0)}return r.type&w.CLOSE_PATH&&c(o-h)<=t&&c(a-l)<=t&&(u=!0),u?[]:r})},t.MATRIX=a,t.ROTATE=function(t,e,i){void 0===e&&(e=0),void 0===i&&(i=0),o(t,e,i);var s=Math.sin(t),r=Math.cos(t);return a(r,s,-s,r,e-e*r+i*s,i-e*s-i*r)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),o(t,e),a(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),o(t,e),a(t,0,0,e,0,0)},t.SKEW_X=function(t){return o(t),a(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return o(t),a(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),o(t),a(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),o(t),a(1,0,0,-1,0,t)},t.A_TO_C=function(){return r(function(t,e,i){return w.ARC===t.type?function(t,e,i){var s,r,o,a;t.cX||h(t,e,i);for(var l=Math.min(t.phi1,t.phi2),c=Math.max(t.phi1,t.phi2)-l,p=Math.ceil(c/90),d=new Array(p),y=e,m=i,g=0;g<p;g++){var f=_(t.phi1,t.phi2,g/p),v=_(t.phi1,t.phi2,(g+1)/p),x=v-f,b=4/3*Math.tan(x*u/4),O=[Math.cos(f*u)-b*Math.sin(f*u),Math.sin(f*u)+b*Math.cos(f*u)],C=O[0],T=O[1],M=[Math.cos(v*u),Math.sin(v*u)],k=M[0],E=M[1],S=[k+b*Math.sin(v*u),E-b*Math.cos(v*u)],A=S[0],R=S[1];d[g]={relative:t.relative,type:w.CURVE_TO};var N=function(e,i){var s=n([e*t.rX,i*t.rY],t.xRot),r=s[0],o=s[1];return[t.cX+r,t.cY+o]};s=N(C,T),d[g].x1=s[0],d[g].y1=s[1],r=N(A,R),d[g].x2=r[0],d[g].y2=r[1],o=N(k,E),d[g].x=o[0],d[g].y=o[1],t.relative&&(d[g].x1-=y,d[g].y1-=m,d[g].x2-=y,d[g].y2-=m,d[g].x-=y,d[g].y-=m),y=(a=[d[g].x,d[g].y])[0],m=a[1]}return d}(t,t.relative?0:e,t.relative?0:i):t})},t.ANNOTATE_ARCS=function(){return r(function(t,e,i){return t.relative&&(e=0,i=0),w.ARC===t.type&&h(t,e,i),t})},t.CLONE=function(){return function(t){var e={};for(var i in t)e[i]=t[i];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),n=s(),o=i(),a=r(function(e,i,s){var r=o(n(t(function(t){var e={};for(var i in t)e[i]=t[i];return e}(e))));function c(t){t>a.maxX&&(a.maxX=t),t<a.minX&&(a.minX=t)}function u(t){t>a.maxY&&(a.maxY=t),t<a.minY&&(a.minY=t)}if(r.type&w.DRAWING_COMMANDS&&(c(i),u(s)),r.type&w.HORIZ_LINE_TO&&c(r.x),r.type&w.VERT_LINE_TO&&u(r.y),r.type&w.LINE_TO&&(c(r.x),u(r.y)),r.type&w.CURVE_TO){c(r.x),u(r.y);for(var _=0,m=d(i,r.x1,r.x2,r.x);_<m.length;_++)0<(F=m[_])&&1>F&&c(y(i,r.x1,r.x2,r.x,F));for(var g=0,f=d(s,r.y1,r.y2,r.y);g<f.length;g++)0<(F=f[g])&&1>F&&u(y(s,r.y1,r.y2,r.y,F))}if(r.type&w.ARC){c(r.x),u(r.y),h(r,i,s);for(var v=r.xRot/180*Math.PI,x=Math.cos(v)*r.rX,b=Math.sin(v)*r.rX,O=-Math.sin(v)*r.rY,C=Math.cos(v)*r.rY,T=r.phi1<r.phi2?[r.phi1,r.phi2]:-180>r.phi2?[r.phi2+360,r.phi1+360]:[r.phi2,r.phi1],M=T[0],k=T[1],E=function(t){var e=t[0],i=t[1],s=180*Math.atan2(i,e)/Math.PI;return s<M?s+360:s},S=0,A=l(O,-x,0).map(E);S<A.length;S++)(F=A[S])>M&&F<k&&c(p(r.cX,x,O,F));for(var R=0,N=l(C,-b,0).map(E);R<N.length;R++){var F;(F=N[R])>M&&F<k&&u(p(r.cY,b,C,F))}}return e});return a.minX=1/0,a.maxX=-1/0,a.minY=1/0,a.maxY=-1/0,a}}(c||(c={}));var m,g,f=function(){function t(){}return t.prototype.round=function(t){return this.transform(c.ROUND(t))},t.prototype.toAbs=function(){return this.transform(c.TO_ABS())},t.prototype.toRel=function(){return this.transform(c.TO_REL())},t.prototype.normalizeHVZ=function(t,e,i){return this.transform(c.NORMALIZE_HVZ(t,e,i))},t.prototype.normalizeST=function(){return this.transform(c.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(c.QT_TO_C())},t.prototype.aToC=function(){return this.transform(c.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(c.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(c.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(c.SCALE(t,e))},t.prototype.rotate=function(t,e,i){return this.transform(c.ROTATE(t,e,i))},t.prototype.matrix=function(t,e,i,s,r,n){return this.transform(c.MATRIX(t,e,i,s,r,n))},t.prototype.skewX=function(t){return this.transform(c.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(c.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(c.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(c.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(c.ANNOTATE_ARCS())},t}(),v=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},x=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},b=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return r(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var i=this;void 0===e&&(e=[]);for(var s=function(t){e.push(t),i.curArgs.length=0,i.canParseCommandOrComma=!0},r=0;r<t.length;r++){var n=t[r];if(x(n))this.curNumber+=n,this.curNumberHasExpDigits=this.curNumberHasExp;else if("e"!==n&&"E"!==n)if("-"!==n&&"+"!==n||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==n||this.curNumberHasExp||this.curNumberHasDecimal){if(this.curNumber&&-1!==this.curCommandType){var o=Number(this.curNumber);if(isNaN(o))throw new SyntaxError("Invalid number ending at "+r);if(this.curCommandType===w.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>o)throw new SyntaxError('Expected positive number, got "'+o+'" at index "'+r+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+r+'"');this.curArgs.push(o),this.curArgs.length===O[this.curCommandType]&&(w.HORIZ_LINE_TO===this.curCommandType?s({type:w.HORIZ_LINE_TO,relative:this.curCommandRelative,x:o}):w.VERT_LINE_TO===this.curCommandType?s({type:w.VERT_LINE_TO,relative:this.curCommandRelative,y:o}):this.curCommandType===w.MOVE_TO||this.curCommandType===w.LINE_TO||this.curCommandType===w.SMOOTH_QUAD_TO?(s({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),w.MOVE_TO===this.curCommandType&&(this.curCommandType=w.LINE_TO)):this.curCommandType===w.CURVE_TO?s({type:w.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===w.SMOOTH_CURVE_TO?s({type:w.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===w.QUAD_TO?s({type:w.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===w.ARC&&s({type:w.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!v(n))if(","===n&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==n&&"-"!==n&&"."!==n){if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+r+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+n+'" at index '+r+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==n&&"Z"!==n)if("h"===n||"H"===n)this.curCommandType=w.HORIZ_LINE_TO,this.curCommandRelative="h"===n;else if("v"===n||"V"===n)this.curCommandType=w.VERT_LINE_TO,this.curCommandRelative="v"===n;else if("m"===n||"M"===n)this.curCommandType=w.MOVE_TO,this.curCommandRelative="m"===n;else if("l"===n||"L"===n)this.curCommandType=w.LINE_TO,this.curCommandRelative="l"===n;else if("c"===n||"C"===n)this.curCommandType=w.CURVE_TO,this.curCommandRelative="c"===n;else if("s"===n||"S"===n)this.curCommandType=w.SMOOTH_CURVE_TO,this.curCommandRelative="s"===n;else if("q"===n||"Q"===n)this.curCommandType=w.QUAD_TO,this.curCommandRelative="q"===n;else if("t"===n||"T"===n)this.curCommandType=w.SMOOTH_QUAD_TO,this.curCommandRelative="t"===n;else{if("a"!==n&&"A"!==n)throw new SyntaxError('Unexpected character "'+n+'" at index '+r+".");this.curCommandType=w.ARC,this.curCommandRelative="a"===n}else e.push({type:w.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=n,this.curNumberHasDecimal="."===n}else this.curNumber+=n,this.curNumberHasDecimal=!0;else this.curNumber+=n;else this.curNumber+=n,this.curNumberHasExp=!0}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,i){void 0===i&&(i=[]);for(var s=0,r=Object.getPrototypeOf(this).parse.call(this,e);s<r.length;s++){var n=r[s],o=t(n);Array.isArray(o)?i.push.apply(i,o):i.push(o)}return i}}})},e}(f),w=function(t){function e(i){var s=t.call(this)||this;return s.commands="string"==typeof i?e.parse(i):i,s}return r(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=c.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],i=0,s=this.commands;i<s.length;i++){var r=t(s[i]);Array.isArray(r)?e.push.apply(e,r):e.push(r)}return this.commands=e,this},e.encode=function(t){return T(t)},e.parse=function(t){var e=new b,i=[];return e.parse(t,i),e.finish(i),i},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(f),O=((m={})[w.MOVE_TO]=2,m[w.LINE_TO]=2,m[w.HORIZ_LINE_TO]=1,m[w.VERT_LINE_TO]=1,m[w.CLOSE_PATH]=0,m[w.QUAD_TO]=4,m[w.SMOOTH_QUAD_TO]=2,m[w.CURVE_TO]=6,m[w.SMOOTH_CURVE_TO]=4,m[w.ARC]=7,m),C=" ";function T(t){var e="";Array.isArray(t)||(t=[t]);for(var i=0;i<t.length;i++){var s=t[i];if(s.type===w.CLOSE_PATH)e+="z";else if(s.type===w.HORIZ_LINE_TO)e+=(s.relative?"h":"H")+s.x;else if(s.type===w.VERT_LINE_TO)e+=(s.relative?"v":"V")+s.y;else if(s.type===w.MOVE_TO)e+=(s.relative?"m":"M")+s.x+C+s.y;else if(s.type===w.LINE_TO)e+=(s.relative?"l":"L")+s.x+C+s.y;else if(s.type===w.CURVE_TO)e+=(s.relative?"c":"C")+s.x1+C+s.y1+C+s.x2+C+s.y2+C+s.x+C+s.y;else if(s.type===w.SMOOTH_CURVE_TO)e+=(s.relative?"s":"S")+s.x2+C+s.y2+C+s.x+C+s.y;else if(s.type===w.QUAD_TO)e+=(s.relative?"q":"Q")+s.x1+C+s.y1+C+s.x+C+s.y;else if(s.type===w.SMOOTH_QUAD_TO)e+=(s.relative?"t":"T")+s.x+C+s.y;else{if(s.type!==w.ARC)throw new Error('Unexpected command type "'+s.type+'" at index '+i+".");e+=(s.relative?"a":"A")+s.rX+C+s.rY+C+s.xRot+C+ +s.lArcFlag+C+ +s.sweepFlag+C+s.x+C+s.y}}return e}var M=function(t){function e(i){var s=t.call(this)||this;return s.commands="string"==typeof i?e.parse(i):i,s}return r(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=c.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],i=0,s=this.commands;i<s.length;i++){var r=t(s[i]);Array.isArray(r)?e.push.apply(e,r):e.push(r)}return this.commands=e,this},e.encode=function(t){return T(t)},e.parse=function(t){var e=new b,i=[];return e.parse(t,i),e.finish(i),i},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(f);(g={})[M.MOVE_TO]=2,g[M.LINE_TO]=2,g[M.HORIZ_LINE_TO]=1,g[M.VERT_LINE_TO]=1,g[M.CLOSE_PATH]=0,g[M.QUAD_TO]=4,g[M.SMOOTH_QUAD_TO]=2,g[M.CURVE_TO]=6,g[M.SMOOTH_CURVE_TO]=4,g[M.ARC]=7;i.d(e,"a",function(){return k});class k{constructor(){}static loadFromFileContents(t){let e=(new DOMParser).parseFromString(t,"image/svg+xml");return this.load(e)}static load(t){let e=t.querySelectorAll("path"),i={},s=[];i.points=[];for(let t of e){let e=new M(t.getAttribute("d")),r={x:0,y:0};for(let[t,n]of e.commands.entries()){switch(n.type){case M.MOVE_TO:case M.LINE_TO:i.points.push([n.x,n.y]);break;case M.HORIZ_LINE_TO:i.points.push([n.x,r.y]);break;case M.VERT_LINE_TO:i.points.push([r.x,n.y]);break;case M.CLOSE_PATH:i.closed=!0,s.push(i),(i={}).points=[]}if(t==e.commands.length-1&&n.type!=M.CLOSE_PATH){let t=i.points[0],e=i.points[i.points.length-1];Math.hypot(e.x-t.x,e.y-t.y)<.1?i.closed=!0:i.closed=!1,s.push(i),(i={}).points=[]}n.hasOwnProperty("x")&&(r.x=n.x),n.hasOwnProperty("y")&&(r.y=n.y)}}for(let t of s){t.x=t.points[0][0],t.y=t.points[0][1],t.points.push([t.x,t.y]);for(let e of t.points)e[0]-=t.x,e[1]-=t.y}return s}}},,,,,,function(t,e){t.exports='<svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" viewBox="0 0 900 900" version="1.1" id="svg8" sodipodi:docname="dla.svg" inkscape:version="0.92.3 (2405546, 2018-03-11)"><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 360.0972,430.72214 356.96812,456.71 347.58087,479.86521 333.41765,498.96906 315.96066,513.06641 300.90813,520.44447 284.47221,525.18747 265.76359,527.75662 243.89295,528.61302 H 209.30835 174.72376 V 430.52451 332.43599 H 210.29649 245.86922 L 268.20099,333.45707 287.23898,336.52027 303.24671,341.32917 316.48767,347.85084 334.60341,362.40932 348.37137,381.31556 357.16575,404.14142 360.0972,430.72214" id="path820"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 307.79212,430.32687 306.01348,412.37583 300.67756,397.25741 291.61969,384.93871 278.41167,375.65026 270.53956,372.4553 262.46982,370.512 252.35794,369.42506 238.09592,369.06274 H 231.706 225.31609 V 430.45864 491.8545 H 231.706 238.09592 L 253.74133,491.45923 264.57783,490.27351 272.91108,487.90199 281.04669,484.21298 293.03602,474.99044 301.33632,463.13284 306.17817,448.27792 307.79212,430.32687" id="path819"></path><path inkscape:connector-curvature="0" id="path821" style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 517.15385,528.61302 H 375.65347 V 332.43599 H 426.24576 V 490.66878 H 517.15385 V 528.61302" sodipodi:nodetypes="ccccccc"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 731.69898,528.61302 H 679.39389 L 665.82358,488.95599 H 593.09708 L 579.52676,528.61302 H 528.53917 L 601.00213,332.43599 H 659.23601 L 731.69898,528.61302" id="path824"></path><path style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:medium;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:&#x27;sans-serif Bold&#x27;;letter-spacing:0.81559914px;word-spacing:0px;fill:none;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none" d="M 653.57075,452.988 629.46033,382.63306 605.34994,452.988 H 653.57075" id="path823"></path></svg>'},,function(t,e,i){"use strict";i.r(e);var s=i(1);class r{constructor(t,e,i){this.p5=t,this.x=e,this.y=i,this.angle=0,this.pathDiameter=800,this.angularSpeed=0,this.maxAngularSpeed=.05,this.angularAcceleration=.001,this.velocity={x:0,y:0},this.maxVelocity=5,this.acceleration=.5,this.friction=.05,this.FREE=0,this.RADIAL=1,this.movementMode=this.FREE,this.heading=0,this.movementAngle=0,this.rotationSpeed=.1,this.isBoosting=!1,this.isBraking=!1,this.isRotatingLeft=!1,this.isRotatingRight=!1,this.isShooting=!1,this.isStill=!0,this.isMovingCounterclockwise=!1,this.isMovingClockwise=!1}draw(){this.p5.fill(255),this.p5.stroke(0),this.p5.translate(this.x,this.y),this.p5.rotate(this.heading),this.p5.beginShape(),this.p5.vertex(12.5,0),this.p5.vertex(-12.5,-10),this.p5.vertex(-12.5,10),this.p5.endShape(this.p5.CLOSE)}move(){switch(this.movementMode){case this.FREE:this.isBoosting&&!this.isBraking&&this.getVelocityMagnitude()<this.maxVelocity&&(this.velocity.x+=Math.cos(this.heading)*this.acceleration,this.velocity.y+=Math.sin(this.heading)*this.acceleration,this.isStill=!1),!this.isBraking||this.isBoosting||this.isStill||(this.velocity.x>0?this.velocity.x-=this.acceleration:this.velocity.x+=this.acceleration,this.velocity.y>0?this.velocity.y-=this.acceleration:this.velocity.y+=this.acceleration),this.isBoosting||this.isBraking||this.isStill||(this.velocity.x>0?this.velocity.x-=this.friction:this.velocity.x+=this.friction,this.velocity.y>0?this.velocity.y-=this.friction:this.velocity.y+=this.friction),this.getVelocityMagnitude()<.1&&(this.velocity.x=0,this.velocity.y=0,this.isStill=!0),this.isRotatingLeft&&!this.isRotatingRight&&(this.heading-=this.rotationSpeed),this.isRotatingRight&&!this.isRotatingLeft&&(this.heading+=this.rotationSpeed),this.x+=this.velocity.x,this.y+=this.velocity.y;break;case this.RADIAL:this.isMovingClockwise&&!this.isMovingCounterclockwise&&Math.abs(this.angularSpeed)<this.maxAngularSpeed&&(this.angularSpeed+=this.angularAcceleration),!this.isMovingClockwise&&this.isMovingCounterclockwise&&Math.abs(this.angularSpeed)<this.maxAngularSpeed&&(this.angularSpeed-=this.angularAcceleration),this.isMovingClockwise||this.isMovingCounterclockwise||(this.angularSpeed>0?this.angularSpeed-=this.angularAcceleration:this.angularSpeed<0&&(this.angularSpeed+=this.angularAcceleration)),this.angle+=this.angularSpeed,this.x=window.innerWidth/2+Math.cos(this.angle)*this.pathDiameter/2,this.y=window.innerHeight/2+Math.sin(this.angle)*this.pathDiameter/2}}getVelocityMagnitude(){return Math.abs(Math.sqrt(this.velocity.x*this.velocity.x+this.velocity.y*this.velocity.y))}}var n=i(3);let o,a,h=!0;const l=0,c=1,u=2,_=3;let p=c;new p5(function(t){function e(){switch(o.removeAll(),p==l||p==u||p==_?(o.showWalkers=!0,function(t){let e=n.a.loadFromFileContents(t);for(let t of e)t.stuck=!0,t.solid=!1,t.x+=window.innerWidth/2-450,t.y+=window.innerHeight/2-450;o.createShapesFromPaths(e)}(i(9))):p==c&&(o.showWalkers=!1),p){case l:o.settings.BiasTowards="Center";break;case u:a.movementMode=a.FREE;break;case _:a.movementMode=a.RADIAL,a.x=window.innerWidth/2-400,a.y=window.innerHeight/2,a.velocity.x=0,a.velocity.y=0}}t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),a=new r(t,window.innerWidth/2,window.innerHeight/2),o=new s.a(t),e()},t.draw=function(){switch(o.iterate(),o.draw(),function(){if(h){t.fill(0),t.noStroke(),t.textSize(20),t.textStyle(t.BOLD),t.text("06 - interactivity",20,40),t.textStyle(t.NORMAL),t.fill(150),t.text("Different ways to interact with DLA\n\nKey commands:\n1 - click-to-grow mode\n2 - mouse trailer mode\n3 - Asteroids mode\n4 - radial Bust-a-Move mode",20,70);let e="";switch(p){case c:e="Click and hold to grow";break;case l:e="Click and hold to spawn walkers";break;case u:e="Use WASD to move, hold Space to shoot";break;case _:e="Use A and D to move, click to shoot"}t.text(e,20,280)}}(),p){case l:t.mouseX>=o.edges.left+20&&t.mouseX<=o.edges.right-20&&t.mouseY>=o.edges.top+20&&t.mouseY<=o.edges.bottom-20&&o.createWalker({x:t.mouseX+t.random(-20,20),y:t.mouseY+t.random(-20,20)});break;case _:t.stroke(200),t.noFill(),t.ellipse(window.innerWidth/2,window.innerHeight/2,800),a.heading=Math.atan2(t.mouseY-a.y,t.mouseX-a.x)}p!=u&&p!=_||(a.move(),a.draw(),a.isShooting&&t.frameCount%5==0&&o.createWalker({x:a.x,y:a.y,BiasTowards:{x:5e3*Math.cos(a.heading),y:5e3*Math.sin(a.heading)}}),t.mouseIsPressed||(a.isShooting=!1),a.x<o.edges.left&&(a.x=o.edges.right),a.x>o.edges.right&&(a.x=o.edges.left),a.y<o.edges.top&&(a.y=o.edges.bottom),a.y>o.edges.bottom&&(a.y=o.edges.top))},t.keyPressed=function(){switch(t.key){case"w":p==u&&(a.isBoosting=!0,a.isBraking=!1);break;case"s":p==u&&(a.isBoosting=!1,a.isBraking=!0);break;case"a":p==u?(a.isRotatingLeft=!0,a.isRotatingRight=!1):p==_&&(a.isMovingCounterclockwise=!0,a.isMovingClockwise=!1);break;case"d":p==u?(a.isRotatingLeft=!1,a.isRotatingRight=!0):p==_&&(a.isMovingCounterclockwise=!1,a.isMovingClockwise=!0);break;case" ":a.isShooting=!0}},t.keyReleased=function(){if(p==u||p==_)switch(t.key){case"w":p==u&&(a.isBoosting=!1);break;case"s":p==u&&(a.isBraking=!1);break;case"a":p==u?a.isRotatingLeft=!1:p==_&&(a.isMovingCounterclockwise=!1);break;case"d":p==u?a.isRotatingRight=!1:p==_&&(a.isMovingClockwise=!1);break;case" ":a.isShooting=!1}switch(t.key){case" ":p!=u&&p!=_&&o.togglePause();break;case"w":p!=u&&p!=_&&o.toggleShowWalkers();break;case"c":o.toggleShowClusters();break;case"r":e();break;case"f":o.toggleUseFrame(),e();break;case"l":o.toggleLineRenderingMode();break;case"e":o.export();break;case"1":p=c,e();break;case"2":p=l,e();break;case"3":p=u,e();break;case"4":p=_,e()}},t.mousePressed=function(){switch(p){case c:o.settings.CircleCenter={x:t.mouseX,y:t.mouseY},o.createDefaultWalkers(4e3,"Circle"),o.createClusterFromParams([{x:t.mouseX,y:t.mouseY}]);for(let e of o.bodies)e.BiasTowards={x:t.mouseX,y:t.mouseY};break;case _:a.isShooting=!0}},t.mouseReleased=function(){switch(p){case c:e()}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,